// Agent labels
def zOsAgentLabel = env.ZOS_AGENT_LABEL ? env.AGENT_LABEL : 'plum-e2e-pipeline'

// DBB Git repositories (For DBB 1.X)
def zAppBuildGitRepo = 'https://github.com/IBM/dbb-zappbuild.git'
def zAppBuildGitBranch = 'zAppBuild_2_x'
def dbbGitRepo = 'https://github.com/IBM/dbb.git'
def dbbGitBranch = 'main'

// Private
def verbose = false
def hasBuildFiles = true
def srcGitRepo =  null
def srcGitBranch = null

pipeline {

    agent { label zOsAgentLabel }
    
     environment {
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        DBB_HOME = "${env.DBB_HOME ? env.DBB_HOME : '/usr/lpp/IBM/dbb'}"
        DBB_URL = "${env.DBB_URL ? env.DBB_URL : 'https://example.com:9443/dbb'}"
        DBB_HLQ = "${env.DBB_HLQ ? env.DBB_HLQ : 'IBMUSER.GENAPP.DBBBUILD'}"
        DBB_CRED = "${env.DBB_CRED ? env.DBB_CRED : '-id ADMIN -pw ADMIN'}"
        GROOVYZ_BUILD_EXTRA_OPTS = "${env.GROOVYZ_BUILD_EXTRA_OPTS ? env.GROOVYZ_BUILD_EXTRA_OPTS : ''}"
        DBB_BUILD_EXTRA_OPTS = "${env.DBB_BUILD_EXTRA_OPTS ? env.DBB_BUILD_EXTRA_OPTS : ''}"
        PYTHON_INTERPRETER = "${env.PYTHON_INTERPRETER ? env.PYTHON_INTERPRETER : '/usr/lpp/IBM/cyp/v3r10/pyz/bin/python3'}"
        ZOAU_HOME =" ${env.ZOAU_HOME ? env.ZOAU_HOME : '/usr/lpp/IBM/zoautil'}"
        ARTIFACTORY_URL  = "${env.ARTIFACTORY_URL  ? env.ARTIFACTORY_URL : 'https://example.com/artifactory'}"
        ARTIFACTORY_REPO = "${env.ARTIFACTORY_REPO  ? env.ARTIFACTORY_REPO : 'repository'}"
        ARTIFACTORY_REPO_PATH = "${env.ARTIFACTORY_REPO_PATH ? env.ARTIFACTORY_REPO_PATH : 'repository_path'}"
        ARTIFACTORY_CRED_ID = "${env.ARTIFACTORY_CRED_ID ? env.ARTIFACTORY_CRED_ID : 'artifactory_id'}"
        PYTHON_VIRTUAL_ENV_COMMAND = "${env.PYTHON_VIRTUAL_ENV_COMMAND ? env.PYTHON_VIRTUAL_ENV_COMMAND : ''}"
     }
     
     parameters {
       string(defaultValue: "1.0.0", description: 'Current release number.', name: 'RELEASE_NUMBER')
       booleanParam(defaultValue: false, description: 'Display verbose output', name: 'VERBOSE')
       choice(choices: ["-impactBuild", "-fullBuild"], description: 'DBB Build Type.', name: 'DBB_BUILD_TYPE')
    }

    options { skipDefaultCheckout(true) }

    stages {
        
        stage('Git Clone/Refresh') {
            steps {
                script {
                    verbose = env.VERBOSE && env.VERBOSE == 'true' ? true : false
                    env.BUILD_VERBOSE = verbose ? '-v' : ''
                    if ( verbose ) {
                        echo sh(script: 'env|sort', returnStdout: true)
                    }
                    dir('cics-genapp') {
                        srcGitRepo = scm.getUserRemoteConfigs()[0].getUrl()
                        srcGitBranch = scm.branches[0].name
                        def scmVars = null
                        scmVars = checkout([$class: 'GitSCM', branches: [[name: srcGitBranch]],
                                                doGenerateSubmoduleConfigurations: false,
                                                submoduleCfg: [],
                                                userRemoteConfigs: [[
                                                                     url: srcGitRepo,
                                                                     ]]])
                    }
                    dir("dbb-zappbuild") {
                        def scmVars =
                            checkout([$class: 'GitSCM', branches: [[name: zAppBuildGitBranch]],
                                    doGenerateSubmoduleConfigurations: false,
                                    submoduleCfg: [],
                                    userRemoteConfigs: [[
                                        url: zAppBuildGitRepo,
                            ]]])
                    }
                }
            }
        }

        stage('DBB Build & Package') {
            steps {
                script{
                    // DBB Build
                    rc = sh (returnStatus: true, script: '''#!/bin/sh
                            CMD="$DBB_HOME/bin/groovyz $GROOVYZ_BUILD_EXTRA_OPTS\
                                ${WORKSPACE}/dbb-zappbuild/build.groovy --logEncoding UTF-8 -w ${WORKSPACE}\
                                --workDir ${WORKSPACE}/BUILD-${BUILD_NUMBER} --hlq ${DBB_HLQ} --url ${DBB_URL}\
                                ${DBB_CRED} -d ${DBB_BUILD_TYPE} ${BUILD_VERBOSE} ${DBB_BUILD_EXTRA_OPTS}\
                                --application cics-genapp --sourceDir ${WORKSPACE}"
                            echo $CMD
                            $CMD
                            exit $?
                        ''')
                    if ( rc != 0 )
                        error("DBB build failed!!!")

                    def files = findFiles(glob: "**BUILD-${BUILD_NUMBER}/**/buildList.txt")
                    // Do not enter into some steps if nothing in the build list
                    hasBuildFiles = files.length > 0 && files[0].length > 0
                }
            }
            post {
                always {
                    dir("${WORKSPACE}/BUILD-${BUILD_NUMBER}") {
                        archiveArtifacts allowEmptyArchive: true,
                                        artifacts: '**/*.log,**/*.json,**/*.html',
                                        excludes: '**/*clist',
                                        onlyIfSuccessful: false
                    }
                }
            }
        }


        stage('Artifactory Upload') {
           environment {
              ARTI_CREDS = credentials("$ARTIFACTORY_CRED_ID")
            }
            steps {
                script {
                    if ( hasBuildFiles ) {
                        writeFile file: "${WORKSPACE}/BUILD-${BUILD_NUMBER}/config.yml", encoding: "UTF-8",
                        text:"""artifact_repository:
   # The type of the artifactory manager [artifactory|nexus]]
   type: 'artifactory'
   # The URL to the Artifactory Server
   url: ${ARTIFACTORY_URL}
   # Artifactory credentials
   user: ${ARTI_CREDS_USR}
   password: ${ARTI_CREDS_PSW}
                             """ 
                        rc = sh (returnStatus: true, script: '''#!/bin/sh
                            if [ - z "PYTHON_VIRTUAL_ENV_COMMAND" ]
                            then
                               echo "Use a virtual env $PYTHON_VIRT_ENV"
                               . $PYTHON_VIRTUAL_ENV_COMMAND
                            fi
                            BUILD_OUTPUT_FOLDER=$(ls ${WORKSPACE}/BUILD-${BUILD_NUMBER} | grep "build.*[0-9]$" | tail -n 1)
                            mkdir -p ${WORKSPACE}/BUILD-${BUILD_NUMBER}/package
                            
                            cd ${WORKSPACE}
                            CMD="${PYTHON_INTERPRETER}\
                                   ${WORKSPACE}/cics-genapp/plum-samples/python/dbb/dbb_prepare_folder.py\
                                   --dbbBuildResult ${WORKSPACE}/BUILD-${BUILD_NUMBER}/${BUILD_OUTPUT_FOLDER}/BuildReport.json\
                                   --workingFolder ${WORKSPACE}/BUILD-${BUILD_NUMBER}/package"
                            echo $CMD
                            $CMD
                            if [ $? -ne 0 ]
                            then
                              exit $?
                            fi
                            export PATH=$HOME/.local/bin:$PATH
                            CMD="plum-package\
                                    --configFile ${WORKSPACE}/BUILD-${BUILD_NUMBER}/config.yml\
                                    --localFolder ${WORKSPACE}/BUILD-${BUILD_NUMBER}/package\
                                    --repository  ${ARTIFACTORY_REPO}\
                                    --repositoryPath  ${ARTIFACTORY_REPO}_PATH\
                                      --manifestVersion "1.0.${BUILD_NUMBER}" \
                                      --manifestName "GenAppCICS"\
                                      --manifestDescription "GenAppCICS"\
                                      --manifest ${WORKSPACE}/BUILD-${BUILD_NUMBER}/package/application_state.yml\
                                    --uploadType archive"
                            echo $CMD
                            $CMD
                            if [ $? -ne 0 ]
                            then
                              exit $?
                            fi
                        ''')
                        if ( rc != 0 )
                            error("Uploading Package failed!!!")
                     }
                }
            }
        }
        
        
        stage('PLUM Python Generation') {
            steps {
                script {
                    if ( hasBuildFiles ) {
                        rc = sh (returnStatus: true, script: '''#!/bin/sh
                            if [ - z "PYTHON_VIRTUAL_ENV_COMMAND" ]
                            then
                               echo "Use a virtual env $PYTHON_VIRT_ENV"
                               . $PYTHON_VIRTUAL_ENV_COMMAND
                            fi
                            cd ${WORKSPACE}
                            CMD="plum-generate\
                                   -dm  ${WORKSPACE}/cics-genapp/deployment_method/deployment_method.yml\
                                   -dp  ${WORKSPACE}/BUILD-${BUILD_NUMBER}/deployment_plan.yml\
                                   -dpr ${WORKSPACE}/BUILD-${BUILD_NUMBER}/deployment_plan_report.html\
                                   -pi  ${WORKSPACE}/BUILD-${BUILD_NUMBER}/package.tar"
                            echo $CMD
                            $CMD
                            rc=$?
                            exit $rc
                        ''')
                        if ( rc != 0 )
                          error("Generation Of Deployment Scripts Failed!!!")
                     }
                }
            }
        }
        
        
        stage('PLUM Python Execution') {
            steps {
                script {
                    if ( hasBuildFiles ) {
                        rc = sh (returnStatus: true, script: '''#!/bin/sh
                            if [ - z "PYTHON_VIRTUAL_ENV_COMMAND" ]
                            then
                               echo "Use a virtual env $PYTHON_VIRT_ENV"
                               . $PYTHON_VIRTUAL_ENV_COMMAND
                            fi
                            export ZOAU_HOME=${ZOAU_HOME}
                            export PATH=${ZOAU_HOME}/bin:$PATH
                            export LIBPATH=${ZOAU_HOME}/lib:${LIBPATH}
                            CMD="plum-deploy\
                                --deploymentPlan  ${WORKSPACE}/BUILD-${BUILD_NUMBER}/deployment_plan.yml\
                                --packageInputFile ${WORKSPACE}/BUILD-${BUILD_NUMBER}/package.tar\
                                --envFile  ${WORKSPACE}//cics-genapp/environment_conf/${PLUM_ENV_FILE}\
                                --evidencesFileName ${WORKSPACE}/BUILD-${BUILD_NUMBER}/deploy/evidence.yml\
                                --workingFolder ${WORKSPACE}/BUILD-${BUILD_NUMBER}/deploy"
                            echo $CMD
                            $CMD > deploy.log 2>&1
                            rc=$?
                            cat deploy.log
                            # For jenkins artifact upload
                            chtag -r ${WORKSPACE}/BUILD-${BUILD_NUMBER}/deployment_plan.yml
                            chtag -r ${WORKSPACE}/BUILD-${BUILD_NUMBER}/deployment_plan_report.html
                            chtag -r  ${WORKSPACE}/BUILD-${BUILD_NUMBER}/deploy/evidence.yml
                            exit $rc
                      ''')
                      if ( rc != 0 )
                          error("Excecution Of Deployment Scripts Failed!!!")
                     }
                }
            }
            post {
                always {
                    dir("${WORKSPACE}/BUILD-${BUILD_NUMBER}") {
                        archiveArtifacts allowEmptyArchive: true,
                                        artifacts: '**/deployment_plan.yml,**/deployment_plan_report.html,**/evidence.yml',
                                        onlyIfSuccessful: false
                    }
                }
            }
        }
    }
}