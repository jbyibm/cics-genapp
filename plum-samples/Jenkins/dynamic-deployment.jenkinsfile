// Agent labels
def linuxAgentLabel = env.LINUX_AGENT_LABEL ? env.AGENT_LABEL : 'master'

// DBB Git repositories (For DBB 1.X)
def zAppBuildGitRepo = 'https://github.com/IBM/dbb-zappbuild.git'
def zAppBuildGitBranch = 'zAppBuild_2_x'
def dbbGitRepo = 'https://github.com/IBM/dbb.git'
def dbbGitBranch = 'main'
def gitCredId = 'git_hub_cred'

// Private
def verbose = false
def hasBuildFiles = true
def srcGitRepo =  null
def srcGitBranch = null

pipeline {

    agent { label linuxAgentLabel }
    
     environment {
        ARTIFACTORY_URL  = "${env.ARTIFACTORY_URL  ? env.ARTIFACTORY_URL : 'https://example.com/artifactory'}"
        ARTIFACTORY_CRED_ID = "${env.ARTIFACTORY_CRED_ID ? env.ARTIFACTORY_CRED_ID : 'artifactory_id'}"
        PYTHON_VIRTUAL_ENV_COMMAND = "${env.PYTHON_VIRTUAL_ENV_COMMAND ? env.PYTHON_VIRTUAL_ENV_COMMAND : ''}"
        ANSIBLE_PLAYBOOK_OPTS = "${env.ANSIBLE_PLAYBOOK_OPTS ? env.ANSIBLE_PLAYBOOK_OPTS : ''}"
     }
     
     parameters {
       booleanParam(defaultValue: false, description: 'Full Deployment', name: 'FULL_DEPLOY')
       booleanParam(defaultValue: false, description: 'Display verbose output', name: 'VERBOSE')
    }

    options { skipDefaultCheckout(true) }

    stages {
        
        stage('Git Clone/Refresh') {
            steps {
                script {
                    verbose = env.VERBOSE && env.VERBOSE == 'true' ? true : false
                    env.BUILD_VERBOSE = verbose ? '-v' : ''
                    if ( verbose ) {
                        echo sh(script: 'env|sort', returnStdout: true)
                    }
                    dir('cics-genapp') {
                        srcGitRepo = scm.getUserRemoteConfigs()[0].getUrl()
                        srcGitBranch = scm.branches[0].name
                        if ( env.APP_GIT_BRANCH == null || env.APP_GIT_BRANCH == "") {
                            srcGitBranch = scm.branches[0].name
                            env.GIT_BRANCH = srcGitBranch
                        } else
                            srcGitBranch =  env.GIT_BRANCH
                        def scmVars = null
                        scmVars = checkout([$class: 'GitSCM', branches: [[name: srcGitBranch]],
                                                doGenerateSubmoduleConfigurations: false,
                                                submoduleCfg: [],
                                                userRemoteConfigs: [[
                                                                     url: srcGitRepo, credentialsId: gitCredId
                                                                     ]]])
                    }
                }
            }
        }

        stage('Deploy: Generate The Deployment Plan & Package') {
           environment {
              ARTI_CREDS = credentials("$ARTIFACTORY_CRED_ID")
            }
            steps {
                script{
                    if ( env.FULL_DEPLOY && env.FULL_DEPLOY == 'true' )
                        env.CURRENT_DEPLOYMENT_STATE=""
                    else
                        env.CURRENT_DEPLOYMENT_STATE="-cds ${WORKSPACE}/cics-genapp/plum-samples/external-repos/deployment-state/deployment_state.yml"

                    writeFile file: "${WORKSPACE}/BUILD-${BUILD_NUMBER}/config.yml", encoding: "UTF-8",
                    text:"""artifact_repository:
   # The type of the artifactory manager [artifactory|nexus]]
   type: 'artifactory'
   # The URL to the Artifactory Server
   url: ${ARTIFACTORY_URL}
   # Artifactory credentials
   user: ${ARTI_CREDS_USR}
   password: ${ARTI_CREDS_PSW}
                             """
                    if ( env.PYTHON_VIRTUAL_ENV_COMMAND == null  ){
                        env.PYTHON_VIRTUAL_ENV_COMMAND = ""
                    }

                    rc = sh (returnStatus: true, script: '''#!/bin/sh
                        cd ${WORKSPACE}
                        if [ "$PYTHON_VIRTUAL_ENV_COMMAND" != "" ]
                        then
                           echo "Use a virtual env $PYTHON_VIRTUAL_ENV_COMMAND"
                           . $PYTHON_VIRTUAL_ENV_COMMAND
                        else
                           export PATH=$PATH:$HOME/.local/bin
                        fi
                        CMD="plum-generate\
                               --deploymentMethod  ${WORKSPACE}/cics-genapp/plum-samples/external-repos/deployment-method/deployment-method.yml\
                               --manifests ${WORKSPACE}/cics-genapp/plum-samples/application-state/application_state.yml\
                               --deploymentPlan ${WORKSPACE}/BUILD-${BUILD_NUMBER}/deployment_plan.yml\
                               --deploymentPlanReport ${WORKSPACE}/BUILD-${BUILD_NUMBER}/deployment_plan_report.html\
                               --deploymentState ${WORKSPACE}/cics-genapp/plum-samples/external-repos/deployment-state/deployment_state.yml\
                               ${CURRENT_DEPLOYMENT_STATE}\
                               --packageOutputFile ${WORKSPACE}/BUILD-${BUILD_NUMBER}/package.tar\
                               --configFile ${WORKSPACE}/BUILD-${BUILD_NUMBER}/config.yml"
                        echo $CMD
                        $CMD
                        rc=$?
                        exit $rc
                    ''')
                    if ( rc != 0 )
                        error("Generation Of Deployment Scripts Failed!!!")

                }
            }
        }


        stage('Deploy: Execute The Deployment With Ansible for z/OS') {
           environment {
              ARTI_CREDS = credentials("$ARTIFACTORY_CRED_ID")
            }
            steps {
                script {
                    rc = sh (returnStatus: true, script: '''#!/bin/sh
                        cd ${WORKSPACE}/cics-genapp/plum-samples/external-repos/environment-conf/ansible
                        CMD="ansible-playbook deploy.yml -i inventories\
                                -e plum_deployment_plan_file=${WORKSPACE}/BUILD-${BUILD_NUMBER}/deployment_plan.yml\
                                -e plum_package_file=${WORKSPACE}/BUILD-${BUILD_NUMBER}/package.tar\
                                ${ANSIBLE_PLAYBOOK_OPTS}"
                        echo $CMD
                        $CMD
                        rc=$?
                        exit $rc
                    ''')
                    if ( rc != 0 )
                        error("Wazi Deploy Ansible Deployment Failed!!!")
                }
            }
            post {
                always {
                    dir("${WORKSPACE}/BUILD-${BUILD_NUMBER}") {
                        archiveArtifacts allowEmptyArchive: true,
                                        artifacts: '**/deployment_plan.yml,**/deployment_plan_report.html,**/package.tar',
                                        onlyIfSuccessful: false
                    }
                    dir("${WORKSPACE}/cics-genapp/plum-samples/external-repos/environment-conf/ansible/evidences") {
                        archiveArtifacts allowEmptyArchive: true,
                                        artifacts: '**/*.yml',
                                        onlyIfSuccessful: false
                    }
                }
            }
        }
        
    }
}